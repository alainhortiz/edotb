<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Paciente;

/**
 * PacienteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PacienteRepository extends \Doctrine\ORM\EntityRepository
{
    public function masterAgregarPaciente($dataPaciente ,$dataDirecciones ,$dataBCX ,$dataFinal , $dataEvolucion ,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{
            $paciente = $em->getRepository('AppBundle:Paciente')->agregarPaciente($dataPaciente);
            $dataDireccionCarnet = array(
                'direccion' => $dataDirecciones['direccionCarnet'],
                'municipio' => $dataDirecciones['municipioCarnet'],
            );
            $direccionCarnet = $em->getRepository('AppBundle:DireccionPaciente')->agregarDireccion($dataDireccionCarnet);
            $dataDireccionResidencia = array(
                'direccion' => $dataDirecciones['direccionResidencia'],
                'municipio' => $dataDirecciones['municipioResidencia'],
            );
            $direccionResidencia = $em->getRepository('AppBundle:DireccionPaciente')->agregarDireccion($dataDireccionResidencia);
            $resultadoBCX = $em->getRepository('AppBundle:ResultadoBCX')->agregarResultadoBCX($dataBCX);
            $resultadoFinal = $em->getRepository('AppBundle:ResultadoFinal')->agregarResultadoFinal($dataFinal);
            $em->getRepository('AppBundle:PacienteEvolucion')->agregarPacienteEvolucion($paciente , $direccionCarnet, $direccionResidencia , $dataEvolucion ,$resultadoBCX , $resultadoFinal);
            if(isset($dataEvolucion['cambiarEstado']))
            {
                $em->getRepository('AppBundle:PacienteSintomatico')->cambiarProceso('registrado' , $dataPaciente['carnetIdentidad']);
            }
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Insertar Nuevo Paciente',
                'descripcion' => 'Se insertó  el paciente de nombre: '.$dataPaciente['nombre'].' '.$dataPaciente['primerApellido'].' '.$dataPaciente['segundoApellido'].' y carnet '.$dataPaciente['carnetIdentidad'],
            );
            $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
            $em->commit();
            $msg = 'ok';

        }catch (\Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al insertar el paciente';
        }
        return $msg;
    }

    public function masterModificarPaciente($dataPaciente ,$dataDirecciones ,$dataBCX , $dataEvolucion ,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{
            $em->getRepository('AppBundle:Paciente')->modificarPaciente($dataPaciente);
            $pacienteEvolucion = $em->getRepository('AppBundle:PacienteEvolucion')->find($dataEvolucion['idEvolucion']);
            $dataDireccionCarnet = array(
                'idDireccion' => $dataDirecciones['idDireccionCarnet'],
                'direccion' => $dataDirecciones['direccionCarnet'],
                'municipio' => $dataDirecciones['municipioCarnet'],
            );
            if (!empty($dataDirecciones['idDireccionCarnet'])) {
                $em->getRepository('AppBundle:DireccionPaciente')->modificarDireccion($dataDireccionCarnet);
            } else {
                $direccionCarnet = $em->getRepository('AppBundle:DireccionPaciente')->agregarDireccion($dataDireccionCarnet);
                $pacienteEvolucion->setDireccionCarnet($direccionCarnet);
            }

            $dataDireccionResidencia = array(
                'idDireccion' => $dataDirecciones['idDireccionResidencia'],
                'direccion' => $dataDirecciones['direccionResidencia'],
                'municipio' => $dataDirecciones['municipioResidencia'],
            );
            if (!empty($dataDirecciones['idDireccionResidencia'])) {
                $em->getRepository('AppBundle:DireccionPaciente')->modificarDireccion($dataDireccionResidencia);
            } else {
                $direccionResidencia = $em->getRepository('AppBundle:DireccionPaciente')->agregarDireccion($dataDireccionResidencia);
                $pacienteEvolucion->setDireccionPaciente($direccionResidencia);
            }

            $dataBCX['idResultadoBCX'] = $pacienteEvolucion->getResultadoBCX()->getId();
            $em->getRepository('AppBundle:ResultadoBCX')->modificarResultadoBCX($dataBCX);
            $em->getRepository('AppBundle:PacienteEvolucion')->modificarPacienteEvolucion($dataEvolucion);
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Actualizar  Paciente',
                'descripcion' => 'Se actualizó  el paciente de nombre: '.$dataPaciente['nombre'].' '.$dataPaciente['primerApellido'].' '.$dataPaciente['segundoApellido'].' y carnet '.$dataPaciente['carnetIdentidad'],
            );
            $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
            $em->commit();
            $msg = 'ok';

        }catch (\Exception $e){

            $em->rollback();
            $msg = $msg = 'Se produjo un error al modificar el paciente';
        }
        return $msg;
    }

    public function masterNuevaEvolucion($ci , $carnet ,$dataDirecciones ,$dataBCX ,$dataFinal , $dataEvolucion ,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{
            if($carnet != -1) {

                $result = $em->getRepository('AppBundle:PacienteEvolucion')->buscarPaciente($ci);
                $evolucion = $result[0];
                $paciente = $evolucion->getPaciente();
                $paciente->setCarnetIdentidad($carnet);
                $em->persist($paciente);
            }
            else{
                $evolucion = $em->getRepository('AppBundle:PacienteEvolucion')->getCurrentEvolucion($ci);
                $paciente =  $evolucion->getPaciente();
            }
            $dataDireccionCarnet = array(
                'direccion' => $dataDirecciones['direccionCarnet'],
                'municipio' => $dataDirecciones['municipioCarnet'],
            );
            $direccionCarnet = $em->getRepository('AppBundle:DireccionPaciente')->agregarDireccion($dataDireccionCarnet);
            $dataDireccionResidencia = array(
                'direccion' => $dataDirecciones['direccionResidencia'],
                'municipio' => $dataDirecciones['municipioResidencia'],
            );
            $direccionResidencia = $em->getRepository('AppBundle:DireccionPaciente')->agregarDireccion($dataDireccionResidencia);
            $resultadoBCX = $em->getRepository('AppBundle:ResultadoBCX')->agregarResultadoBCX($dataBCX);
            $resultadoFinal = $em->getRepository('AppBundle:ResultadoFinal')->agregarResultadoFinal($dataFinal);
            $em->getRepository('AppBundle:PacienteEvolucion')->agregarPacienteEvolucion($paciente , $direccionCarnet, $direccionResidencia , $dataEvolucion ,$resultadoBCX , $resultadoFinal);

            $evolucion->setCurrent(0);
            $em->persist($evolucion);


            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Nuevo Seguimiento',
                'descripcion' => 'Se agrega un nuevo seguimiento al paciente: '.$paciente->getNombre().' '.$paciente->getPrimerApellido().' '.$paciente->getSegundoApellido().' y carnet '.$paciente->getCarnetIdentidad(),
            );
            $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);

            $em->commit();
            $msg = 'ok';

        }catch (\Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al insertar el nuevo seguimiento';
        }
        return $msg;
    }

    public function agregarPaciente($data)
    {
        try{
            $em = $this->getEntityManager();
            $paciente = new Paciente();
            if($data['carnetIdentidad'] == '')
            {
                $paciente->setCarnetIdentidad($data['nombre'].'Sin Carnet');
            }else{
                $paciente->setCarnetIdentidad($data['carnetIdentidad']);
            }
            $paciente->setCarnetIdentidad($data['carnetIdentidad']);
            $paciente->setNombre(strtoupper($data['nombre']));
            $paciente->setPrimerApellido(strtoupper($data['primerApellido']));
            $paciente->setSegundoApellido(strtoupper($data['segundoApellido']));
            $paciente->setSexo($data['sexo']);

            $em->persist($paciente);
            $em->flush();
            $msg = $paciente;

        }catch (\Exception $e)
        {
            if(strpos($e->getMessage() , 'Duplicate entry') > 0)
            {
                $msg = 'El Paciente ya existe , no se puede agregar';
            }
            else
            {
                $msg = $e->getMessage();
            }
        }
        return $msg;
    }

    public function modificarPaciente($data)
    {
        try{
            $em = $this->getEntityManager();
            $paciente = $em->getRepository('AppBundle:Paciente')->find($data['idPaciente']);
            if($data['carnetIdentidad'] == '')
            {
                $paciente->setCarnetIdentidad($data['nombre'].'Sin Carnet');
            }else{
                $paciente->setCarnetIdentidad($data['carnetIdentidad']);
            }
            $paciente->setNombre(strtoupper($data['nombre']));
            $paciente->setPrimerApellido(strtoupper($data['primerApellido']));
            $paciente->setSegundoApellido(strtoupper($data['segundoApellido']));
            $paciente->setSexo($data['sexo']);

            $em->persist($paciente);
            $em->flush();
            $msg = $paciente;


        }catch (\Exception $e)
        {
            if(strpos($e->getMessage() , 'Duplicate entry') > 0)
            {
                $msg = 'Ya existe un paciente con este carnet de identidad , no se puede hacer esta modificación';
            }
            else
            {
                $msg = 'Se produjo un error al modificar el Paciente';
            }
        }
        return $msg;
    }

    public function listarPacientesDBAccess()
    {
        $em = $this->getEntityManager();
        $dql = 'SELECT p FROM AppBundle:Paciente p 
                WHERE p.carnetIdentidad LIKE :ci';
        $query = $em->createQuery($dql);
        $query->setParameter('ci' , '%CI%');
        $pacientes = $query->getResult();

        return $pacientes;
    }

    public function listarPacientesSinEvolucion()
    {
        $em = $this->getEntityManager();
        $dql = 'SELECT p FROM AppBundle:Paciente p 
                WHERE NOT EXISTS(SELECT e FROM AppBundle:PacienteEvolucion e JOIN e.paciente ep
                WHERE ep = p)';
        $query = $em->createQuery($dql);
        $pacientes = $query->getResult();

        return $pacientes;
    }

    public function eliminarPacienteSinEvolucion($idPaciente)
    {
        try {
            $em = $this->getEntityManager();
            $paciente = $em->getRepository('AppBundle:Paciente')->find($idPaciente);
            $em->remove($paciente);
            $em->flush();
            $msg = $paciente;

        } catch (\Exception $e) {

            $msg = 'Se produjo un error al eliminar el paciente sin evolucion';
        }
        return $msg;
    }

}
