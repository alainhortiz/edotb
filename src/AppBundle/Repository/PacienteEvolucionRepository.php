<?php

namespace AppBundle\Repository;
use AppBundle\Entity\EsquemaMedicamentos;
use AppBundle\Entity\PacienteEvolucion;

/**
 * PacienteEvolucionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PacienteEvolucionRepository extends \Doctrine\ORM\EntityRepository
{
    public function agregarPacienteEvolucion($paciente , $direccionCarnet, $direccionResidencia , $dataEvolucion , $resultadoBCX , $resultadoFinal)
    {
        try{
            $em = $this->getEntityManager();
            $pacienteEvolucion = new PacienteEvolucion();
            $pacienteEvolucion->setPaciente($paciente);
            $pacienteEvolucion->setTelefono($dataEvolucion['telefono']);
            $pacienteEvolucion->setEdad($dataEvolucion['edad']);

            $pais = $em->getRepository('AppBundle:Pais')->find($dataEvolucion['pais']);
            $pacienteEvolucion->setPais($pais);

            $pacienteEvolucion->setDireccionPaciente($direccionResidencia);
            $pacienteEvolucion->setDireccionCarnet($direccionCarnet);

            $pacienteEvolucion->setDefinicionCaso($dataEvolucion['definicionCaso']);

            $pacienteEvolucion->setRayosX($dataEvolucion['rayosX']);
            $pacienteEvolucion->setAnatomiaPatologica($dataEvolucion['anatomiaPatologica']);


            $pacienteEvolucion->setResultadoBCX($resultadoBCX);

            $pacienteEvolucion->setLocalizacionAnatomica($dataEvolucion['localizacionAnatomica']);

            $tipoEnfermo = $em->getRepository('AppBundle:TipoEnfermo')->find($dataEvolucion['tipoEnfermo']);
            $pacienteEvolucion->setTipoEnfermo($tipoEnfermo);

            $pacienteEvolucion->setFechaVIH(new \DateTime($dataEvolucion['fechaVIH']));
            $pacienteEvolucion->setResultadoVIH($dataEvolucion['diagnosticoVIH']);
            $pacienteEvolucion->setTarv($dataEvolucion['tARV']);
            $pacienteEvolucion->setTcp($dataEvolucion['tCP']);

            $pacienteEvolucion->setFechaCovit(new \DateTime($dataEvolucion['fechaCovit']));
            $pacienteEvolucion->setCovit($dataEvolucion['covit']);

            $pruebaSensibilidad = $em->getRepository('AppBundle:PruebaSensibilidad')->findOneBy(array('nombre' => $dataEvolucion['pruebaSensibilidad']));
            $pacienteEvolucion->setPruebaSensibilidad($pruebaSensibilidad);

            $resistencia = $em->getRepository('AppBundle:Resistencia')->findOneBy(array('clasificacion' => $dataEvolucion['resistencia']));
            $pacienteEvolucion->setResistencia($resistencia);

            $grupoVulnerable = $em->getRepository('AppBundle:GrupoVulnerable')->find($dataEvolucion['grupoVulnerable']);
            $pacienteEvolucion->setGrupoVulnerable($grupoVulnerable);

            $pacienteEvolucion->setRecluso($dataEvolucion['recluso']);

            $centroAtencion = $em->getRepository('AppBundle:AreaSalud')->find($dataEvolucion['centroAtencion']);
            $pacienteEvolucion->setAreaSalud($centroAtencion);

            $centroResidencia = $em->getRepository('AppBundle:AreaSalud')->find($dataEvolucion['centroResidencia']);
            $pacienteEvolucion->setCentroResidencia($centroResidencia);

            $centroDiagnostico = $em->getRepository('AppBundle:AreaSalud')->find($dataEvolucion['centroDiagnostico']);
            $pacienteEvolucion->setCentroDiagnostico($centroDiagnostico);

            $pacienteEvolucion->setObservaciones($dataEvolucion['observaciones']);
            $pacienteEvolucion->setCambiadoTratSegundaLinea(0);

            $pacienteEvolucion->addResultadosFinale($resultadoFinal);
            $pacienteEvolucion->setFechaNotificacion(new \DateTime($dataEvolucion['fechaNotificacion']));
            $pacienteEvolucion->setFechaDiagnostico(new \DateTime($dataEvolucion['fechaDiagnostico']));

            $enfermedad = $em->getRepository('AppBundle:Enfermedad')->findOneBy(array(
                'localizacionAnatomica' => $dataEvolucion['localizacionAnatomica'],
                'definicionCaso' => $dataEvolucion['definicionCaso'],
                'tipoEnfermo' => $tipoEnfermo->getTipo()
            ));
            $pacienteEvolucion->setEnfermedad($enfermedad);

            $pacienteEvolucion->setNecro($dataEvolucion['necro']);
            $pacienteEvolucion->setCurrent(1);

            if(isset($dataEvolucion['esquemasMedicamentos']) and count($dataEvolucion['esquemasMedicamentos']) != 0)
            {
                $em->getRepository('AppBundle:EsquemaMedicamentos')->agregarEsquemasMedicamentos($dataEvolucion['esquemasMedicamentos'] , $pacienteEvolucion);

            }else  $pacienteEvolucion->setFechaInicioTrat(new \DateTime('1700-01-01'));

            $em->persist($pacienteEvolucion);
            $em->flush();
            $msg = $pacienteEvolucion;

        }catch (\Exception $e)
        {
            $msg = $e->getMessage();
        }
        return $msg;
    }

    public function buscarPaciente($ci)
    {
        $em = $this->getEntityManager();
        $dql = 'SELECT e FROM AppBundle:PacienteEvolucion e JOIN e.paciente p
                WHERE p.carnetIdentidad = :ci ORDER BY e.id ';
        $query = $em->createQuery($dql);
        $query->setParameter('ci' , $ci);
        $evoluciones = $query->getResult();

        return $evoluciones;
    }

    public function getCurrentEvolucion($ci)
    {
        $em = $this->getEntityManager();
        $dql = 'SELECT e FROM AppBundle:PacienteEvolucion e JOIN e.paciente p
                WHERE p.carnetIdentidad = :ci AND e.current = 1';
        $query = $em->createQuery($dql);
        $query->setParameter('ci' , $ci);
        $evolucion = $query->getResult();

        return $evolucion[0];

    }

    public function modificarPacienteEvolucion($dataEvolucion)
    {
        try{
            $em = $this->getEntityManager();
            $pacienteEvolucion = $em->getRepository('AppBundle:PacienteEvolucion')->find($dataEvolucion['idEvolucion']);
            $pacienteEvolucion->setTelefono($dataEvolucion['telefono']);
            $pacienteEvolucion->setEdad($dataEvolucion['edad']);

            $pais = $em->getRepository('AppBundle:Pais')->find($dataEvolucion['pais']);
            $pacienteEvolucion->setPais($pais);

            $pacienteEvolucion->setLocalizacionAnatomica($dataEvolucion['localizacionAnatomica']);

            $tipoEnfermo = $em->getRepository('AppBundle:TipoEnfermo')->find($dataEvolucion['tipoEnfermo']);
            $pacienteEvolucion->setTipoEnfermo($tipoEnfermo);

            $pacienteEvolucion->setFechaVIH(new \DateTime($dataEvolucion['fechaVIH']));
            $pacienteEvolucion->setResultadoVIH($dataEvolucion['diagnosticoVIH']);
            $pacienteEvolucion->setTarv($dataEvolucion['tARV']);
            $pacienteEvolucion->setTcp($dataEvolucion['tCP']);

            $pacienteEvolucion->setFechaCovit(new \DateTime($dataEvolucion['fechaCovit']));
            $pacienteEvolucion->setCovit($dataEvolucion['covit']);

            $pruebaSensibilidad = $em->getRepository('AppBundle:PruebaSensibilidad')->findOneBy(array('nombre' => $dataEvolucion['pruebaSensibilidad']));
            $pacienteEvolucion->setPruebaSensibilidad($pruebaSensibilidad);

            $resistencia = $em->getRepository('AppBundle:Resistencia')->findOneBy(array('clasificacion' => $dataEvolucion['resistencia']));
            $pacienteEvolucion->setResistencia($resistencia);

            $grupoVulnerable = $em->getRepository('AppBundle:GrupoVulnerable')->find($dataEvolucion['grupoVulnerable']);
            $pacienteEvolucion->setGrupoVulnerable($grupoVulnerable);

            $pacienteEvolucion->setRecluso($dataEvolucion['recluso']);

            $centroAtencion = $em->getRepository('AppBundle:AreaSalud')->find($dataEvolucion['centroAtencion']);
            $pacienteEvolucion->setAreaSalud($centroAtencion);

            $centroResidencia = $em->getRepository('AppBundle:AreaSalud')->find($dataEvolucion['centroResidencia']);
            $pacienteEvolucion->setCentroResidencia($centroResidencia);

            $centroDiagnostico = $em->getRepository('AppBundle:AreaSalud')->find($dataEvolucion['centroDiagnostico']);
            $pacienteEvolucion->setCentroDiagnostico($centroDiagnostico);

            if($pacienteEvolucion->getEsquemasMedicamentos())
            {
                foreach ($pacienteEvolucion->getEsquemasMedicamentos() as $esquema)
                {
                    $pacienteEvolucion->removeEsquemasMedicamento($esquema);
                    $em->remove($esquema);
                    $em->persist($pacienteEvolucion);
                }
            }

            if(isset($dataEvolucion['esquemasMedicamentos']) and count($dataEvolucion['esquemasMedicamentos']) != 0)
            {

                $em->getRepository('AppBundle:EsquemaMedicamentos')->agregarEsquemasMedicamentos($dataEvolucion['esquemasMedicamentos'] , $pacienteEvolucion);

            }else  $pacienteEvolucion->setFechaInicioTrat(new \DateTime('1700-01-01'));

            $pacienteEvolucion->setObservaciones($dataEvolucion['observaciones']);
            $pacienteEvolucion->setCambiadoTratSegundaLinea($dataEvolucion['cambiadoTratSegundaLinea']);
            $pacienteEvolucion->setFechaNotificacion(new \DateTime($dataEvolucion['fechaNotificacion']));
            $pacienteEvolucion->setFechaDiagnostico(new \DateTime($dataEvolucion['fechaDiagnostico']));

            $enfermedad = $em->getRepository('AppBundle:Enfermedad')->findOneBy(array(
                'localizacionAnatomica' => $dataEvolucion['localizacionAnatomica'],
                'definicionCaso' => $pacienteEvolucion->getDefinicionCaso(),
                'tipoEnfermo' => $tipoEnfermo->getTipo()
            ));
            $pacienteEvolucion->setEnfermedad($enfermedad);

            $pacienteEvolucion->setNecro($dataEvolucion['necro']);

            $resultadoTratamiento = $em->getRepository('AppBundle:ResultadoTratamiento')->findOneBy(array('resultado' => $dataEvolucion['resultadoTratamiento']));
            $lastResult = $pacienteEvolucion->getResultadosFinales()->last();
            if($lastResult->getResultadoTratamiento()->getResultado() != $resultadoTratamiento->getResultado()){

                $dataFinal = array(
                    'resultadoTratamiento' => $dataEvolucion['resultadoTratamiento'],
                    'fecha' => $dataEvolucion['fechaResultadoFinal'],
                );

                $resultadoFinal = $em->getRepository('AppBundle:ResultadoFinal')->agregarResultadoFinal($dataFinal);
                $lastResult->setUltimo(0);
                $em->persist($lastResult);
                $pacienteEvolucion->addResultadosFinale($resultadoFinal);
            }

            $em->persist($pacienteEvolucion);
            $em->flush();
            $msg = $pacienteEvolucion;

        }catch (\Exception $e)
        {
            $msg  = $e->getMessage();
        }
        return $msg;
    }

    public function cantPacientesConDeterminadoResultadoTratamiento($user, $resultadoTratamiento)
    {
        $em = $this->getEntityManager();
        $nivelAcceso = $user->getNivelAcceso()->getNivel();

        if($nivelAcceso == 'nacional')
        {
            $dql = 'SELECT COUNT(e.id)  FROM AppBundle:PacienteEvolucion e
                    WHERE e.current = 1 AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                    WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rt.resultado = :p1)';
            $query = $em->createQuery($dql);
            $query->setParameter('p1' , $resultadoTratamiento);
        }
        elseif($nivelAcceso == 'provincial')
        {
            if(!empty($user->getAreaSalud()))
            {
                $provincia = $user->getAreaSalud()->getMunicipio()->getProvincia()->getCodigo();
            }else{
                $provincia = $user->getHospital()->getMunicipio()->getProvincia()->getCodigo();
            }
            $dql = 'SELECT COUNT(e.id) FROM AppBundle:PacienteEvolucion e 
                    LEFT JOIN e.areaSalud a LEFT JOIN a.municipio am LEFT JOIN am.provincia ap
                    LEFT JOIN e.hospital h LEFT JOIN h.municipio hm LEFT JOIN hm.provincia hp
                    WHERE (ap.codigo = :codigo OR hp.codigo = :codigo) AND e.current = 1 AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                    WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rt.resultado = :p1)';
            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $provincia);
            $query->setParameter('p1' , $resultadoTratamiento);
        }
        elseif($nivelAcceso == 'municipal')
        {
            if(!empty($user->getAreaSalud()))
            {
                $municipio = $user->getAreaSalud()->getMunicipio()->getCodigo();
            }else{
                $municipio = $user->getHospital()->getMunicipio()->getCodigo();
            }
            $dql = 'SELECT COUNT(e.id) FROM AppBundle:PacienteEvolucion e
                    LEFT JOIN e.areaSalud a LEFT JOIN a.municipio am
                    LEFT JOIN e.hospital h LEFT JOIN h.municipio hm
                    WHERE (am.codigo = :codigo OR hm.codigo = :codigo) AND e.current = 1 AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                    WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rt.resultado = :p1)';
            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $municipio);
            $query->setParameter('p1' , $resultadoTratamiento);
        }
        else
        {
            if(!empty($user->getAreaSalud()))
            {
                $codigo = $user->getAreaSalud()->getCodigo();
            }else{
                $codigo = $user->getHospital()->getCodigo();
            }
            $dql = 'SELECT COUNT(e.id) FROM AppBundle:PacienteEvolucion e 
                    LEFT JOIN e.areaSalud a  LEFT JOIN e.hospital h
                    WHERE (a.codigo = :codigo OR h.codigo = :codigo) AND e.current = 1 AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                    WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rt.resultado = :p1)';
            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $codigo);
            $query->setParameter('p1' , $resultadoTratamiento);
        }
        $cantidad = $query->getResult();

        return !empty($cantidad) ? $cantidad[0][1] : 0;
    }

    public function cantPacientesConTratamientoTerminado($user)
    {
        $em = $this->getEntityManager();
        $nivelAcceso = $user->getNivelAcceso()->getNivel();

        if($nivelAcceso == 'nacional')
        {
            $dql = 'SELECT COUNT(e.id) FROM AppBundle:PacienteEvolucion e LEFT JOIN e.esquemasMedicamentos em 
                    WHERE e.current = 1 AND em.current = 1 AND SIZE(em.asistenciasTratamientos) > 107 
                    AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                    WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rt.resultado = :p1)';
            $query = $em->createQuery($dql);
            $query->setParameter('p1' , 'No evaluado');
        }
        elseif($nivelAcceso == 'provincial')
        {
            if(!empty($user->getAreaSalud()))
            {
                $provincia = $user->getAreaSalud()->getMunicipio()->getProvincia()->getCodigo();
            }else{
                $provincia = $user->getHospital()->getMunicipio()->getProvincia()->getCodigo();
            }
            $dql = 'SELECT COUNT(e.id) FROM AppBundle:PacienteEvolucion e 
                    LEFT JOIN e.areaSalud a LEFT JOIN a.municipio am LEFT JOIN am.provincia ap
                    LEFT JOIN e.hospital h LEFT JOIN h.municipio hm LEFT JOIN hm.provincia hp
                    LEFT JOIN e.esquemasMedicamentos em 
                    WHERE (ap.codigo = :codigo OR hp.codigo = :codigo) AND e.current = 1 AND em.current = 1 AND SIZE(em.asistenciasTratamientos) > 107
                    AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                    WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rt.resultado = :p1)';
            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $provincia);
            $query->setParameter('p1' , 'No evaluado');
        }
        elseif($nivelAcceso == 'municipal')
        {
            if(!empty($user->getAreaSalud()))
            {
                $municipio = $user->getAreaSalud()->getMunicipio()->getCodigo();
            }else{
                $municipio = $user->getHospital()->getMunicipio()->getCodigo();
            }
            $dql = 'SELECT COUNT(e.id) FROM AppBundle:PacienteEvolucion e
                    LEFT JOIN e.areaSalud a LEFT JOIN a.municipio am
                    LEFT JOIN e.hospital h LEFT JOIN h.municipio hm 
                    LEFT JOIN e.esquemasMedicamentos em
                    WHERE (am.codigo = :codigo OR hm.codigo = :codigo) AND e.current = 1 AND em.current = 1 AND SIZE(em.asistenciasTratamientos) > 107
                    AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                    WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rt.resultado = :p1)';

            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $municipio);
            $query->setParameter('p1' , 'No evaluado');
        }
        else
        {
            if(!empty($user->getAreaSalud()))
            {
                $codigo = $user->getAreaSalud()->getCodigo();
            }else{
                $codigo = $user->getHospital()->getCodigo();
            }
            $dql = 'SELECT COUNT(e.id) FROM AppBundle:PacienteEvolucion e 
                    LEFT JOIN e.areaSalud a  LEFT JOIN e.hospital h
                    LEFT JOIN e.esquemasMedicamentos em
                    WHERE (a.codigo = :codigo OR h.codigo = :codigo) AND e.current = 1 AND em.current = 1 AND SIZE(em.asistenciasTratamientos) > 107
                    AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                    WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rt.resultado = :p1)';
            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $codigo);
            $query->setParameter('p1' , 'No evaluado');
        }
        $cantidad = $query->getResult();

        return !empty($cantidad) ? $cantidad[0][1] : 0;
    }

    public function cantPosiblesPerdidasDeSeguimiento($user)
    {
        $actual = new \DateTime('now');
        $actualString = $actual->format('Y-m-d');
        $em = $this->getEntityManager();
        $nivelAcceso = $user->getNivelAcceso()->getNivel();

        if($nivelAcceso == 'nacional')
        {
            $dql = 'SELECT COUNT(e.id) FROM AppBundle:PacienteEvolucion e LEFT JOIN e.esquemasMedicamentos em
                    WHERE e.current = 1 
                    AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                        WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rt.resultado = :p1)
                    AND (e.esquemasMedicamentos IS EMPTY OR (em.asistenciasTratamientos IS EMPTY AND em.current = 1 AND DATE_DIFF(?1 , em.fechaInicio) > 30)
                        OR EXISTS (SELECT at FROM AppBundle:AsistenciaTratamiento at 
                        WHERE at MEMBER OF em.asistenciasTratamientos  AND DATE_DIFF(?1 , at.fecha) > 30))';
            $query = $em->createQuery($dql);
            $query->setParameter(1 , $actualString);
            $query->setParameter('p1' , 'No evaluado');
        }
        elseif($nivelAcceso == 'provincial')
        {
            if(!empty($user->getAreaSalud()))
            {
                $provincia = $user->getAreaSalud()->getMunicipio()->getProvincia()->getCodigo();

            }else{
                $provincia = $user->getHospital()->getMunicipio()->getProvincia()->getCodigo();
            }
            $dql = 'SELECT COUNT(e.id) FROM AppBundle:PacienteEvolucion e
                        LEFT JOIN e.areaSalud a LEFT JOIN a.municipio am LEFT JOIN am.provincia ap
                        LEFT JOIN e.hospital h LEFT JOIN h.municipio hm LEFT JOIN hm.provincia hp 
                        LEFT JOIN e.esquemasMedicamentos em 
                        WHERE (ap.codigo = :codigo OR hp.codigo = :codigo) AND e.current = 1 
                        AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                            WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rt.resultado = :p1)
                        AND (e.esquemasMedicamentos IS EMPTY OR (em.asistenciasTratamientos IS EMPTY AND em.current = 1 AND DATE_DIFF(?1 , em.fechaInicio) > 30)
                            OR EXISTS (SELECT at FROM AppBundle:AsistenciaTratamiento at 
                            WHERE at MEMBER OF em.asistenciasTratamientos  AND DATE_DIFF(?1 , at.fecha) > 30))';
            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $provincia);
            $query->setParameter(1 , $actualString);
            $query->setParameter('p1' , 'No evaluado');
        }
        elseif($nivelAcceso == 'municipal')
        {
            if(!empty($user->getAreaSalud()))
            {
                $municipio = $user->getAreaSalud()->getMunicipio()->getCodigo();
            }else{
                $municipio = $user->getHospital()->getMunicipio()->getCodigo();
            }
            $dql = 'SELECT COUNT(e.id) FROM AppBundle:PacienteEvolucion e
                        LEFT JOIN e.areaSalud a LEFT JOIN a.municipio am
                        LEFT JOIN e.hospital h LEFT JOIN h.municipio hm  
                        LEFT JOIN e.esquemasMedicamentos em 
                        WHERE (am.codigo = :codigo OR hm.codigo = :codigo) AND e.current = 1 
                        AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                            WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rt.resultado = :p1)
                        AND (e.esquemasMedicamentos IS EMPTY OR (em.asistenciasTratamientos IS EMPTY AND em.current = 1 AND DATE_DIFF(?1 , em.fechaInicio) > 30)
                            OR EXISTS (SELECT at FROM AppBundle:AsistenciaTratamiento at 
                            WHERE at MEMBER OF em.asistenciasTratamientos  AND DATE_DIFF(?1 , at.fecha) > 30))';
            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $municipio);
            $query->setParameter(1 , $actualString);
            $query->setParameter('p1' , 'No evaluado');
        }
        else
        {
            if(!empty($user->getAreaSalud()))
            {
                $codigo = $user->getAreaSalud()->getCodigo();
            }else{
                $codigo = $user->getHospital()->getCodigo();
            }
            $dql = 'SELECT COUNT(e.id) FROM AppBundle:PacienteEvolucion e
                    LEFT JOIN e.areaSalud a  
                    LEFT JOIN e.hospital h
                    LEFT JOIN e.esquemasMedicamentos em 
                    WHERE (a.codigo = :codigo OR h.codigo = :codigo) AND e.current = 1 
                    AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                        WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rt.resultado = :p1)
                    AND (e.esquemasMedicamentos IS EMPTY OR (em.asistenciasTratamientos IS EMPTY AND em.current = 1 AND DATE_DIFF(?1 , em.fechaInicio) > 30)
                        OR EXISTS (SELECT at FROM AppBundle:AsistenciaTratamiento at 
                        WHERE at MEMBER OF em.asistenciasTratamientos  AND DATE_DIFF(?1 , at.fecha) > 30))';
            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $codigo);
            $query->setParameter(1 , $actualString);
            $query->setParameter('p1' , 'No evaluado');
        }
        $cantidad = $query->getResult();

        return !empty($cantidad) ? $cantidad[0][1] : 0;
    }

    public function eliminarPacienteEvolucion($idEvolucion)
    {
        try {
            $em = $this->getEntityManager();
            $evolucion = $em->getRepository('AppBundle:PacienteEvolucion')->find($idEvolucion);
            $paciente = $evolucion->getPaciente();
            $em->getRepository('AppBundle:PacienteTransferido')->eliminarPacienteTransferido($paciente->getId());
            $em->remove($paciente);
            $em->flush();
            $msg = $paciente;

        } catch (\Exception $e) {

            $msg = 'Se produjo un error al eliminar el paciente';
        }
        return $msg;
    }

    public function listarPacientesNotificadosAnno($user , $anno)
    {
        $em = $this->getEntityManager();
        $nivelAcceso = $user->getNivelAcceso()->getNivel();

        if($nivelAcceso == 'nacional')
        {
            $dql = 'SELECT e FROM AppBundle:PacienteEvolucion e 
                    WHERE e.fechaNotificacion LIKE :fecha';
            $query = $em->createQuery($dql);
            $query->setParameter('fecha' , '%'.$anno.'%');
        }
        elseif($nivelAcceso == 'provincial')
        {
            if(!empty($user->getAreaSalud()))
            {
                $provincia = $user->getAreaSalud()->getMunicipio()->getProvincia()->getCodigo();
            }else{
                $provincia = $user->getHospital()->getMunicipio()->getProvincia()->getCodigo();
            }
            $dql = 'SELECT e FROM AppBundle:PacienteEvolucion e
                    LEFT JOIN e.areaSalud a LEFT JOIN a.municipio am LEFT JOIN am.provincia ap
                    LEFT JOIN e.hospital h LEFT JOIN h.municipio hm LEFT JOIN hm.provincia hp  
                    WHERE (ap.codigo = :codigo OR hp.codigo = :codigo) AND e.fechaNotificacion LIKE :fecha';
            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $provincia);
            $query->setParameter('fecha' , '%'.$anno.'%');
        }
        elseif($nivelAcceso == 'municipal')
        {
            if(!empty($user->getAreaSalud()))
            {
                $municipio = $user->getAreaSalud()->getMunicipio()->getCodigo();
            }else{
                $municipio = $user->getHospital()->getMunicipio()->getCodigo();
            }
            $dql = 'SELECT e FROM AppBundle:PacienteEvolucion e
                    LEFT JOIN e.areaSalud a LEFT JOIN a.municipio am
                    LEFT JOIN e.hospital h LEFT JOIN h.municipio hm    
                    WHERE (am.codigo = :codigo OR hm.codigo = :codigo)  AND e.fechaNotificacion LIKE :fecha ';
            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $municipio);
            $query->setParameter('fecha' , '%'.$anno.'%');
        }
        else
        {
            if(!empty($user->getAreaSalud()))
            {
                $areaSalud = $user->getAreaSalud()->getCodigo();
            }else{
                $areaSalud = $user->getHospital()->getCodigo();
            }
            $dql = 'SELECT e FROM AppBundle:PacienteEvolucion e
                    LEFT JOIN e.areaSalud a  
                    LEFT JOIN e.hospital h 
                    WHERE (a.codigo = :codigo OR h.codigo = :codigo) AND e.fechaNotificacion LIKE :fecha ';
            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $areaSalud);
            $query->setParameter('fecha' , '%'.$anno.'%');
        }
        $evoluciones = $query->getResult();

        return $evoluciones;
    }

    public function buscarPacientesNotificadosAnno($data,$user)
    {
        $em = $this->getEntityManager();
        $nivelAcceso = $user->getNivelAcceso()->getNivel();

        if($data['anno'] == 0){
            $fechaActual = new \DateTime('now');
            $data['anno'] =  $fechaActual->format('Y');
        }

        if($nivelAcceso == 'nacional')
        {
            $dql = "SELECT e FROM AppBundle:PacienteEvolucion e 
                    WHERE e.fechaNotificacion LIKE '%".$data['anno']."%' ";
        }
        elseif($nivelAcceso == 'provincial')
        {
            if(!empty($user->getAreaSalud()))
            {
                $provincia = $user->getAreaSalud()->getMunicipio()->getProvincia()->getCodigo();
            }else{
                $provincia = $user->getHospital()->getMunicipio()->getProvincia()->getCodigo();
            }
            $dql = "SELECT e FROM AppBundle:PacienteEvolucion e
                    LEFT JOIN e.areaSalud a LEFT JOIN a.municipio am LEFT JOIN am.provincia ap
                    LEFT JOIN e.hospital h LEFT JOIN h.municipio hm LEFT JOIN hm.provincia hp  
                    WHERE (ap.codigo = $provincia OR hp.codigo = $provincia)  AND e.fechaNotificacion LIKE '%".$data['anno']."%'";
        }
        elseif($nivelAcceso == 'municipal')
        {
            if(!empty($user->getAreaSalud()))
            {
                $municipio = $user->getAreaSalud()->getMunicipio()->getCodigo();
            }else{
                $municipio = $user->getHospital()->getMunicipio()->getCodigo();
            }
            $dql = "SELECT e FROM AppBundle:PacienteEvolucion e
                    LEFT JOIN e.areaSalud a LEFT JOIN a.municipio am
                    LEFT JOIN e.hospital h LEFT JOIN h.municipio hm    
                    WHERE (am.codigo = $municipio OR hm.codigo = $municipio) AND e.fechaNotificacion LIKE '%".$data['anno']."%'";
        }
        else
        {
            if(!empty($user->getAreaSalud()))
            {
                $areaSalud = $user->getAreaSalud()->getCodigo();
            }else{
                $areaSalud = $user->getHospital()->getCodigo();
            }
            $dql = "SELECT e FROM AppBundle:PacienteEvolucion e
                    LEFT JOIN e.areaSalud a  
                    LEFT JOIN e.hospital h 
                    WHERE (a.codigo = $areaSalud OR h.codigo = $areaSalud) AND e.fechaNotificacion LIKE '%".$data['anno']."%'";
        }

        if($data['idSemana'] != 0)
        {
            $semanaSeleccionada = $em->getRepository('AppBundle:SemanaEstadistica')->find($data['idSemana']);
            $fechaInicial = $semanaSeleccionada->getFechaInicio()->format('Y-m-d');
            $fechaFinal = $semanaSeleccionada->getFechaFinal()->format('Y-m-d');
            $dql .= "  AND e.fechaNotificacion >= '".$fechaInicial."' AND e.fechaNotificacion <= '".$fechaFinal."'";
        }
        if($data['resultadoTratamiento'] != 'vacio')
        {
            $dql .= "  AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                    WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rt.resultado = '".$data['resultadoTratamiento']."')";
        }
        $query = $em->createQuery($dql);
        $evoluciones = $query->getResult();

        return $evoluciones;
    }

    public function ponerEnFracasoAlTratamiento($evolucion , $fecha)
    {
        $em = $this->getEntityManager();

        $last = $evolucion->getResultadosFinales();
        $lastResult = $last[count($last) - 1];
        $lastResult->setUltimo(0);
        $em->persist($lastResult);
        $em->flush();
        $dataFinal = array(

            'resultadoTratamiento' => 'Fracaso al tratamiento',
            'fecha' => $fecha,
        );
        $resultadoFinal = $em->getRepository('AppBundle:ResultadoFinal')->agregarResultadoFinal($dataFinal);
    }

    /* ------------Gráficos-----------------*/
    public function yearExistentes()
    {
        $em = $this->getEntityManager();
        $db = $em->getConnection();
        $sql = 'SELECT DISTINCT(YEAR(p.fechaNotificacion)) AS year 
                FROM paciente_evolucion as p
                WHERE p.current = true
                ORDER BY year DESC';

        $query = $db->prepare($sql);
        $query->execute();

        return $query->fetchAll();
    }

    public function yearExistentes1()
    {
        $em = $this->getEntityManager();
        $dql = 'SELECT DISTINCT e.fechaNotificacion 
                FROM AppBundle:PacienteEvolucion e
                WHERE e.current = :p1';
        $query = $em->createQuery($dql);
        $query->setParameter('p1' , true);

        $years = $query->getResult();
        $result = [];
        $datos = [];
        if (isset($years)) {
            $cant = count($years);
            for($i=0; $i<$cant; $i++)
            {
                $datos[$i] = $years[$i]['fechaNotificacion']->format('Y');
            }
            $result = array_unique($datos);
        }
        return $result;
    }

    public function yearCasos($fechaInicio,$fechaFinal)
    {
        $em = $this->getEntityManager();
        $dql = 'SELECT p.codigo, COUNT(e) as cant FROM AppBundle:PacienteEvolucion e 
                JOIN e.areaSalud a
                JOIN a.municipio m
                JOIN m.provincia p
                WHERE e.fechaNotificacion >= :p1 
                AND e.fechaNotificacion <= :p2 
                AND e.current = :p3
                GROUP BY p.codigo
                ORDER BY p.id ';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $fechaInicio);
        $query->setParameter('p2' , $fechaFinal);
        $query->setParameter('p3' , true);

        return $query->getResult();
    }

    public function categorias($fechaInicio,$fechaFinal)
    {
        $em = $this->getEntityManager();
        $dql = 'SELECT n.codigo,n.localizacionAnatomica,n.definicionCaso,n.tipoEnfermo, COUNT(e) as cant FROM AppBundle:PacienteEvolucion e 
                JOIN e.enfermedad n
                WHERE e.fechaNotificacion >= :p1 
                AND e.fechaNotificacion <= :p2 
                AND e.current = :p3
                GROUP BY n.codigo,n.localizacionAnatomica,n.definicionCaso,n.tipoEnfermo
                ORDER BY cant DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $fechaInicio);
        $query->setParameter('p2' , $fechaFinal);
        $query->setParameter('p3' , true);

        return $query->getResult();
    }

    public function categoriasProvincias($fechaInicio,$fechaFinal,$codigo)
    {
        $em = $this->getEntityManager();
        $dql = 'SELECT p.nombre as provincia, COUNT(e) as cant FROM AppBundle:PacienteEvolucion e 
                JOIN e.areaSalud a
                JOIN a.municipio m
                JOIN m.provincia p
                JOIN e.enfermedad n
                WHERE e.fechaNotificacion >= :p1 
                AND e.fechaNotificacion <= :p2 
                AND e.current = :p3
                AND n.codigo =:p4
                GROUP BY p.nombre
                ORDER BY cant DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $fechaInicio);
        $query->setParameter('p2' , $fechaFinal);
        $query->setParameter('p3' , true);
        $query->setParameter('p4' , $codigo);

        return $query->getResult();
    }

    public function categoriasMunicipios($fechaInicio,$fechaFinal,$codigo,$provincia)
    {
        $em = $this->getEntityManager();
        $dql = 'SELECT m.nombre as municipio, COUNT(e) as cant FROM AppBundle:PacienteEvolucion e 
                JOIN e.areaSalud a
                JOIN a.municipio m
                JOIN m.provincia p
                JOIN e.enfermedad n
                WHERE e.fechaNotificacion >= :p1 
                AND e.fechaNotificacion <= :p2 
                AND e.current = :p3
                AND p.nombre = :p4
                AND n.codigo = :p5  
                GROUP BY m.nombre
                ORDER BY cant DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $fechaInicio);
        $query->setParameter('p2' , $fechaFinal);
        $query->setParameter('p3' , true);
        $query->setParameter('p4' , $provincia);
        $query->setParameter('p5' , $codigo);

        return $query->getResult();
    }

    public function notificadosYears()
    {
        $em = $this->getEntityManager();
        $db = $em->getConnection();
        $sql = 'SELECT YEAR(p.fechaNotificacion) AS y, COUNT(*) as cant 
                FROM paciente_evolucion as p
                GROUP BY y
                ORDER BY cant DESC';

        $query = $db->prepare($sql);
        $query->execute();

        return $query->fetchAll();
    }

    public function categoriaNotificadosYears($codigo)
    {
        $em = $this->getEntityManager();
        $db = $em->getConnection();
        $sql = 'SELECT YEAR(p.fechaNotificacion) AS y, COUNT(*) as cant 
                FROM paciente_evolucion as p, enfermedad as e
                WHERE p.enfermedad_id = e.id
                AND e.codigo =' . $codigo .
                ' GROUP BY y
                ORDER BY cant DESC';

        $query = $db->prepare($sql);
        $query->execute();

        return $query->fetchAll();
    }

    public function categoriaProvinciaNotificadosYears($codigo,$provincia)
    {
        $em = $this->getEntityManager();
        $db = $em->getConnection();
        $sql = 'SELECT YEAR(p.fechaNotificacion) AS y, COUNT(*) as cant 
                FROM paciente_evolucion as p, area_salud as a, municipio as m, provincia as pr, enfermedad as e
                WHERE p.area_salud_id = a.id
                AND a.municipio_id = m.id
                AND m.provincia_id = pr.id
                AND p.enfermedad_id = e.id
                AND pr.nombre = "' . $provincia .
                '" AND e.codigo = ' . $codigo .
                ' GROUP BY y
                ORDER BY cant DESC';

        $query = $db->prepare($sql);
        $query->execute();

        return $query->fetchAll();
    }

    public function categoriaMunicipioNotificadosYears($codigo,$municipio)
    {
        $em = $this->getEntityManager();
        $db = $em->getConnection();
        $sql = 'SELECT YEAR(p.fechaNotificacion) AS y, COUNT(*) as cant 
                FROM paciente_evolucion as p, area_salud as a, municipio as m, enfermedad as e
                WHERE p.area_salud_id = a.id
                AND a.municipio_id = m.id
                AND p.enfermedad_id = e.id
                AND m.nombre = "' . $municipio .
               '" AND e.codigo = ' . $codigo .
               ' GROUP BY y
                ORDER BY cant DESC';

        $query = $db->prepare($sql);
        $query->execute();

        return $query->fetchAll();
    }

    public function gruposVulnerables($fechaInicio,$fechaFinal)
    {
        $em = $this->getEntityManager();
        $dql = 'SELECT g.grupo, COUNT(e) as cant FROM AppBundle:PacienteEvolucion e 
                JOIN e.grupoVulnerable g
                WHERE e.fechaNotificacion >= :p1 
                AND e.fechaNotificacion <= :p2 
                AND e.current = :p3
                GROUP BY g.grupo
                ORDER BY cant DESC ';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $fechaInicio);
        $query->setParameter('p2' , $fechaFinal);
        $query->setParameter('p3' , true);

        return $query->getResult();
    }

    public function categoriaGruposVulnerables($fechaInicio,$fechaFinal,$codigo)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT g.grupo, COUNT(e) as cant FROM AppBundle:PacienteEvolucion e 
                JOIN e.grupoVulnerable g
                JOIN e.enfermedad n
                WHERE e.fechaNotificacion >= :p1 
                AND e.fechaNotificacion <= :p2 
                AND e.current = :p3
                AND n.codigo = :p4
                GROUP BY g.grupo
                ORDER BY cant DESC ';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $fechaInicio);
        $query->setParameter('p2' , $fechaFinal);
        $query->setParameter('p3' , true);
        $query->setParameter('p4' , $codigo);

        return $query->getResult();
    }

    public function categoriaProvinciaGruposVulnerables($fechaInicio,$fechaFinal,$codigo,$provincia)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT g.grupo, COUNT(e) as cant FROM AppBundle:PacienteEvolucion e 
                JOIN e.areaSalud a
                JOIN a.municipio m
                JOIN m.provincia p
                JOIN e.grupoVulnerable g
                JOIN e.enfermedad n
                WHERE e.fechaNotificacion >= :p1 
                AND e.fechaNotificacion <= :p2 
                AND e.current = :p3
                AND p.nombre = :p4
                AND n.codigo = :p5
                GROUP BY g.grupo
                ORDER BY cant DESC ';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $fechaInicio);
        $query->setParameter('p2' , $fechaFinal);
        $query->setParameter('p3' , true);
        $query->setParameter('p4' , $provincia);
        $query->setParameter('p5' , $codigo);

        return $query->getResult();
    }

    public function categoriaMunicipioGruposVulnerables($fechaInicio,$fechaFinal,$codigo,$municipio)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT g.grupo, COUNT(e) as cant FROM AppBundle:PacienteEvolucion e 
                JOIN e.areaSalud a
                JOIN a.municipio m
                JOIN m.provincia p
                JOIN e.grupoVulnerable g
                JOIN e.enfermedad n
                WHERE e.fechaNotificacion >= :p1 
                AND e.fechaNotificacion <= :p2 
                AND e.current = :p3
                AND m.nombre = :p4
                AND n.codigo = :p5
                GROUP BY g.grupo
                ORDER BY cant DESC ';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $fechaInicio);
        $query->setParameter('p2' , $fechaFinal);
        $query->setParameter('p3' , true);
        $query->setParameter('p4' , $municipio);
        $query->setParameter('p5' , $codigo);

        return $query->getResult();
    }

    public function grupoVulnerableCategorias($fechaInicio,$fechaFinal,$grupo)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT n.codigo, COUNT(e) as cant FROM AppBundle:PacienteEvolucion e 
                JOIN e.grupoVulnerable g
                JOIN e.enfermedad n
                WHERE e.fechaNotificacion >= :p1 
                AND e.fechaNotificacion <= :p2 
                AND e.current = :p3
                AND g.grupo = :p4
                GROUP BY n.codigo
                ORDER BY cant DESC ';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $fechaInicio);
        $query->setParameter('p2' , $fechaFinal);
        $query->setParameter('p3' ,true);
        $query->setParameter('p4' , $grupo);

        return $query->getResult();
    }

    public function resultadosTratamientos($fechaInicio,$fechaFinal)
    {
        $em = $this->getEntityManager();
        $dql = 'SELECT rest.resultado, COUNT(e) as cant
                FROM AppBundle:PacienteEvolucion e 
                LEFT JOIN e.resultadosFinales resf 
                LEFT JOIN resf.resultadoTratamiento rest 
                WHERE e.fechaNotificacion >= :p1 
                AND e.fechaNotificacion <= :p2 
                AND e.current = :p3
                AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rf.id = resf.id)
                GROUP BY rest.resultado
                ORDER BY cant DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $fechaInicio);
        $query->setParameter('p2' , $fechaFinal);
        $query->setParameter('p3' , true);

        return $query->getResult();
    }

    public function categoriaResultadosTratamiento($fechaInicio,$fechaFinal,$codigo)
    {
        $em = $this->getEntityManager();
        $dql = 'SELECT rest.resultado, COUNT(e) as cant
                FROM AppBundle:PacienteEvolucion e 
                JOIN e.enfermedad n
                LEFT JOIN e.resultadosFinales resf 
                LEFT JOIN resf.resultadoTratamiento rest 
                WHERE e.fechaNotificacion >= :p1 
                AND e.fechaNotificacion <= :p2 
                AND e.current = :p3
                AND n.codigo = :p4
                AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rf.id = resf.id)
                GROUP BY rest.resultado
                ORDER BY cant DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $fechaInicio);
        $query->setParameter('p2' , $fechaFinal);
        $query->setParameter('p3' , true);
        $query->setParameter('p4' , $codigo);

        return $query->getResult();
    }

    public function categoriaProvinciaResultadosTratamiento($fechaInicio,$fechaFinal,$codigo,$provincia)
    {
        $em = $this->getEntityManager();
        $dql = 'SELECT rest.resultado, COUNT(e) as cant
                FROM AppBundle:PacienteEvolucion e 
                JOIN e.areaSalud a
                JOIN a.municipio m
                JOIN m.provincia p
                JOIN e.enfermedad n
                LEFT JOIN e.resultadosFinales resf 
                LEFT JOIN resf.resultadoTratamiento rest 
                WHERE e.fechaNotificacion >= :p1 
                AND e.fechaNotificacion <= :p2 
                AND e.current = :p3
                AND p.nombre = :p4
                AND n.codigo = :p5
                AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rf.id = resf.id)
                GROUP BY rest.resultado
                ORDER BY cant DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $fechaInicio);
        $query->setParameter('p2' , $fechaFinal);
        $query->setParameter('p3' , true);
        $query->setParameter('p4' , $provincia);
        $query->setParameter('p5' , $codigo);

        return $query->getResult();
    }

    public function categoriaMunicipioResultadosTratamiento($fechaInicio,$fechaFinal,$codigo,$municipio)
    {
        $em = $this->getEntityManager();
        $dql = 'SELECT rest.resultado, COUNT(e) as cant
                FROM AppBundle:PacienteEvolucion e 
                JOIN e.areaSalud a
                JOIN a.municipio m
                JOIN m.provincia p
                JOIN e.enfermedad n
                LEFT JOIN e.resultadosFinales resf 
                LEFT JOIN resf.resultadoTratamiento rest 
                WHERE e.fechaNotificacion >= :p1 
                AND e.fechaNotificacion <= :p2 
                AND e.current = :p3
                AND m.nombre = :p4
                AND n.codigo = :p5
                AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rf.id = resf.id)
                GROUP BY rest.resultado
                ORDER BY cant DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $fechaInicio);
        $query->setParameter('p2' , $fechaFinal);
        $query->setParameter('p3' , true);
        $query->setParameter('p4' , $municipio);
        $query->setParameter('p5' , $codigo);

        return $query->getResult();
    }

    public function grupoVulnerableResultadosTratamiento($fechaInicio,$fechaFinal,$grupo)
    {
        $em = $this->getEntityManager();
        $dql = 'SELECT rest.resultado, COUNT(e) as cant
                FROM AppBundle:PacienteEvolucion e 
                JOIN e.grupoVulnerable g
                LEFT JOIN e.resultadosFinales resf 
                LEFT JOIN resf.resultadoTratamiento rest 
                WHERE e.fechaNotificacion >= :p1 
                AND e.fechaNotificacion <= :p2 
                AND e.current = :p3
                AND g.grupo = :p4
                AND EXISTS (SELECT rf FROM AppBundle:ResultadoFinal rf JOIN rf.resultadoTratamiento rt 
                WHERE rf MEMBER OF e.resultadosFinales AND rf.ultimo = 1 AND rf.id = resf.id)
                GROUP BY rest.resultado
                ORDER BY cant DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $fechaInicio);
        $query->setParameter('p2' , $fechaFinal);
        $query->setParameter('p3' , true);
        $query->setParameter('p4' , $grupo);

        return $query->getResult();
    }

    public function listarPacientesResistentes($user)
    {
        $em = $this->getEntityManager();
        $nivelAcceso = $user->getNivelAcceso()->getNivel();

        if($nivelAcceso == 'unidad')
        {
            if($user->getAreaSalud() != null)
            {
                $areaSalud = $user->getAreaSalud()->getCodigo();
            }else{
                $areaSalud = $user->getHospital()->getCodigo();

            }
            $dql = 'SELECT t FROM AppBundle:PacienteTransferido t 
                    LEFT JOIN t.origen a LEFT JOIN t.origenHospital h
                    WHERE (a.codigo = :codigo OR h.codigo = :codigo)  AND t.nivel = :nivel
                    ORDER BY t.fecha DESC ';
            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $areaSalud);
            $query->setParameter('nivel' , 'unidad');
        }
        elseif($nivelAcceso == 'municipal')
        {
            if(!empty($user->getAreaSalud()))
            {
                $municipio = $user->getAreaSalud()->getMunicipio()->getCodigo();
            }else{
                $municipio = $user->getHospital()->getMunicipio()->getCodigo();

            }
            $dql = 'SELECT t FROM AppBundle:PacienteTransferido t 
                    LEFT JOIN t.origen a LEFT JOIN a.municipio am
                    LEFT JOIN t.origenHospital h LEFT JOIN h.municipio hm
                    WHERE (am.codigo = :codigo OR hm.codigo = :codigo) AND t.nivel = :nivel
                    ORDER BY t.fecha DESC ';
            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $municipio);
            $query->setParameter('nivel' , 'municipal');
        }
        elseif($nivelAcceso == 'provincial')
        {
            if(!empty($user->getAreaSalud()))
            {
                $provincia = $user->getAreaSalud()->getMunicipio()->getProvincia()->getCodigo();
            }else{
                $provincia = $user->getHospital()->getMunicipio()->getProvincia()->getCodigo();

            }
            $dql = 'SELECT t FROM AppBundle:PacienteTransferido t 
                    LEFT JOIN t.origen a LEFT JOIN a.municipio am LEFT JOIN am.provincia ap
                    LEFT JOIN t.origenHospital h LEFT JOIN h.municipio hm LEFT JOIN hm.provincia hp
                    WHERE (ap.codigo = :codigo OR hp.codigo = :codigo) AND t.nivel = :nivel
                    ORDER BY t.fecha DESC ';
            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $provincia);
            $query->setParameter('nivel' , 'provincial');
        }
        else{
            $dql = 'SELECT t FROM AppBundle:PacienteTransferido t ORDER BY t.fecha DESC ';
            $query = $em->createQuery($dql);
        }
        $pacientes = $query->getResult();

        foreach ($pacientes as $paciente)
        {
            $paciente->setVisto(1);
            $em->persist($paciente);
        }
        $em->flush();

        return $pacientes;
    }

}
