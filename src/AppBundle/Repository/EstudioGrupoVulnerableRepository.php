<?php

namespace AppBundle\Repository;
use AppBundle\Entity\EstudioGrupoVulnerable;


/**
 * EstudioGrupoVulnerableRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EstudioGrupoVulnerableRepository extends \Doctrine\ORM\EntityRepository
{
    public function agregarParteDiarioEstudioGruposVulnerables($data)
    {
        try{
            $em = $this->getEntityManager();

            $dql = 'SELECT e FROM AppBundle:EstudioGrupoVulnerable e JOIN e.grupoVulnerable g JOIN  e.areaSalud a
                    WHERE e.fecha = :fecha AND g.id = :idGrupo AND a.id = :idArea';
            $query = $em->createQuery($dql);
            $query->setParameter('fecha' , $data['fecha']);
            $query->setParameter('idGrupo' , $data['grupoVulnerable']);
            $query->setParameter('idArea' , $data['areaSalud']);
            $estudio = $query->getResult();
            if(count($estudio) > 0) return 'Ya existe un parte de esta unidad sobre el mismo grupo vulnerable  en esta fecha, no se puede agregar';

            $parteDiario = new EstudioGrupoVulnerable();
            $parteDiario->setFecha(new \DateTime($data['fecha']));
            $parteDiario->setIdentificados((int)$data['identificados']);
            $parteDiario->setIdentificadosMenoresCinco((int)$data['identificadosMenoresCinco']);
            $parteDiario->setTuberculinasRealizadas((int)$data['tuberculinasRealizadas']);
            $parteDiario->setTuberculinasRealizadasMenoresCinco((int)$data['tuberculinasRealizadasMenoresCinco']);
            $parteDiario->setTuberculinasPositivas((int)$data['tuberculinasPositivas']);
            $parteDiario->setTuberculinasPositivasMenoresCinco((int)$data['tuberculinasPositivasMenoresCinco']);
            $parteDiario->setTerapiaPreventivaIsoniazidaIniciadas((int)$data['terapiaPreventivaIsoniazidaIniciadas']);
            $parteDiario->setTerapiaPreventivaIsoniazidaIniciadasMenoresCinco((int)$data['terapiaPreventivaIsoniazidaIniciadasMenoresCinco']);
            $parteDiario->setTerapiaPreventivaIsoniazidaTerminadas((int)$data['terapiaPreventivaIsoniazidaTerminadas']);
            $parteDiario->setTerapiaPreventivaIsoniazidaTerminadasMenoresCinco((int)$data['terapiaPreventivaIsoniazidaTerminadasMenoresCinco']);
            $parteDiario->setCotrimoxazolPacientesCoinfectados((int)$data['cotrimoxazolPacientesCoinfectados']);

            $grupoVulnerable = $em->getRepository('AppBundle:GrupoVulnerable')->find($data['grupoVulnerable']);
            $parteDiario->setGrupoVulnerable($grupoVulnerable);


            $areaSalud = $em->getRepository('AppBundle:AreaSalud')->find($data['areaSalud']);
            $parteDiario->setAreaSalud($areaSalud);

            $em->persist($parteDiario);
            $em->flush();
            $msg = $parteDiario;

        }catch (\Exception $e)
        {
            $msg = 'Se produjo un error al insertar el parte';
        }

        return $msg;
    }

    public function listarPartesDiariosEstudioGruposVulnerables($user)
    {
        $em = $this->getEntityManager();
        $nivelAcceso = $user->getNivelAcceso()->getNivel();

        if($nivelAcceso == 'nacional')
        {
            $dql = 'SELECT e FROM AppBundle:EstudioGrupoVulnerable e ORDER BY e.fecha DESC';
            $query = $em->createQuery($dql);
        }
        elseif($nivelAcceso == 'provincial')
        {
            $provincia = $user->getAreaSalud()->getMunicipio()->getProvincia()->getCodigo();
            $dql = 'SELECT e FROM AppBundle:EstudioGrupoVulnerable e JOIN  e.areaSalud a JOIN a.municipio m JOIN m.provincia p
                    WHERE  p.codigo = :codigo ORDER BY e.fecha DESC';
            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $provincia);
        }
        elseif($nivelAcceso == 'municipal')
        {
            $municipio = $user->getAreaSalud()->getMunicipio()->getCodigo();
            $dql = 'SELECT e FROM AppBundle:EstudioGrupoVulnerable e JOIN e.areaSalud a JOIN a.municipio m
                    WHERE  m.codigo = :codigo ORDER BY e.fecha DESC';
            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $municipio);
        }
        else
        {
            $areaSalud = $user->getAreaSalud()->getCodigo();
            $dql = 'SELECT e FROM AppBundle:EstudioGrupoVulnerable e JOIN e.areaSalud a
                    WHERE a.codigo = :codigo ORDER BY e.fecha DESC';
            $query = $em->createQuery($dql);
            $query->setParameter('codigo' , $areaSalud);
        }
        $partesDiarios = $query->getResult();

        return $partesDiarios;

    }

    public function eliminarParteDiarioEstudioGruposVulnerables($idParteDiarioEstudioGruposVulnerables)
    {
        try {
            $em = $this->getEntityManager();
            $parte = $em->getRepository('AppBundle:EstudioGrupoVulnerable')->find($idParteDiarioEstudioGruposVulnerables);

            $em->remove($parte);
            $em->flush();
            $msg = $parte;

        } catch (\Exception $e) {

            $msg = 'Se produjo un error al eliminar el parte';
        }
        return $msg;
    }

    public function modificarParteDiarioEstudioGruposVulnerables($data)
    {
        try{
            $em = $this->getEntityManager();

            $dql = 'SELECT e FROM AppBundle:EstudioGrupoVulnerable e JOIN e.grupoVulnerable g JOIN  e.areaSalud a
                    WHERE e.fecha = :fecha AND g.id = :idGrupo AND a.id = :idArea';
            $query = $em->createQuery($dql);
            $query->setParameter('fecha' , $data['fecha']);
            $query->setParameter('idGrupo' , $data['grupoVulnerable']);
            $query->setParameter('idArea' , $data['areaSalud']);
            $estudio = $query->getResult();

            if(count($estudio) > 0 && $estudio[0]->getId() != $data['idParteDiarioEstudioGV']) return 'Ya existe un parte de esta unidad sobre el mismo grupo vulnerable  en esta fecha, no puede hacerse esta modificaciÃ³n';

            $parteDiario = $em->getRepository('AppBundle:EstudioGrupoVulnerable')->find($data['idParteDiarioEstudioGV']);
            $parteDiario->setFecha(new \DateTime($data['fecha']));
            $parteDiario->setIdentificados((int)$data['identificados']);
            $parteDiario->setIdentificadosMenoresCinco((int)$data['identificadosMenoresCinco']);
            $parteDiario->setTuberculinasRealizadas((int)$data['tuberculinasRealizadas']);
            $parteDiario->setTuberculinasRealizadasMenoresCinco((int)$data['tuberculinasRealizadasMenoresCinco']);
            $parteDiario->setTuberculinasPositivas((int)$data['tuberculinasPositivas']);
            $parteDiario->setTuberculinasPositivasMenoresCinco((int)$data['tuberculinasPositivasMenoresCinco']);
            $parteDiario->setTerapiaPreventivaIsoniazidaIniciadas((int)$data['terapiaPreventivaIsoniazidaIniciadas']);
            $parteDiario->setTerapiaPreventivaIsoniazidaIniciadasMenoresCinco((int)$data['terapiaPreventivaIsoniazidaIniciadasMenoresCinco']);
            $parteDiario->setTerapiaPreventivaIsoniazidaTerminadas((int)$data['terapiaPreventivaIsoniazidaTerminadas']);
            $parteDiario->setTerapiaPreventivaIsoniazidaTerminadasMenoresCinco((int)$data['terapiaPreventivaIsoniazidaTerminadasMenoresCinco']);
            $parteDiario->setCotrimoxazolPacientesCoinfectados((int)$data['cotrimoxazolPacientesCoinfectados']);

            $grupoVulnerable = $em->getRepository('AppBundle:GrupoVulnerable')->find($data['grupoVulnerable']);
            $parteDiario->setGrupoVulnerable($grupoVulnerable);


            $areaSalud = $em->getRepository('AppBundle:AreaSalud')->find($data['areaSalud']);
            $parteDiario->setAreaSalud($areaSalud);

            $em->persist($parteDiario);
            $em->flush();
            $msg = $parteDiario;

        }catch (\Exception $e)
        {
            $msg = "Se produjo un error al modificar el parte";
        }

        return $msg;

    }

    public function buscarDatosReporteDiarioMensual($data)
    {

        try{
            $em = $this->getEntityManager();

            if($data['areaSalud'] != '0')
            {
                $dql = 'SELECT e FROM AppBundle:EstudioGrupoVulnerable e JOIN e.areaSalud a JOIN e.grupoVulnerable g
                        WHERE  e.fecha LIKE ?1 AND a.id = :idArea AND g.id = :idGrupo ORDER BY e.fecha ASC ';
                $query = $em->createQuery($dql);
                $query->setParameter('idArea' , $data['areaSalud']);

            }else if($data['municipio'] != '0'){

                $dql = 'SELECT e FROM AppBundle:EstudioGrupoVulnerable e JOIN e.areaSalud a JOIN a.municipio m JOIN e.grupoVulnerable g
                        WHERE  e.fecha LIKE ?1 AND m.id = :idMunicipio AND g.id = :idGrupo ORDER BY e.fecha ASC ';
                $query = $em->createQuery($dql);
                $query->setParameter('idMunicipio' , $data['municipio']);

            }else if($data['provincia'] != '0'){

                $dql = 'SELECT e FROM AppBundle:EstudioGrupoVulnerable e JOIN e.areaSalud a JOIN a.municipio m  JOIN m.provincia p JOIN e.grupoVulnerable g
                        WHERE  e.fecha LIKE ?1 AND p.id = :idProvincia AND g.id = :idGrupo ORDER BY e.fecha ASC ';
                $query = $em->createQuery($dql);
                $query->setParameter('idProvincia' , $data['provincia']);

            }else{

                $dql = 'SELECT e FROM AppBundle:EstudioGrupoVulnerable e JOIN e.grupoVulnerable g
                        WHERE  e.fecha LIKE ?1  AND g.id = :idGrupo ORDER BY e.fecha ASC ';
                $query = $em->createQuery($dql);
            }
            $query->setParameter(1 ,  $data['anno'].'-'.$data['mes'].'%');
            $query->setParameter('idGrupo' , $data['grupoVulnerable']);
            $partesDiarios = $query->getResult();

            if(count($partesDiarios) == 0) $partesDiarios = "Error: No se encontraron partes diarios en la bÃºsqueda, no se puede generar el reporte";

        }catch (\Exception $e)
        {
           $partesDiarios = "Error: No se pudo realizar la bÃºsqueda" ;
        }

        return $partesDiarios;

    }
}
