<?php

namespace AppBundle\Repository;
use AppBundle\Entity\ControlCalidadBaciloscopia;

/**
 * ControlCalidadBaciloscopiaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ControlCalidadBaciloscopiaRepository extends \Doctrine\ORM\EntityRepository
{
    public function agregarControlCalidadBaciloscopia($data)
    {
        $msg = 'ok';

        if(!$this->buscaControlCalidadBaciloscopiaExiste($data['id_laboratorio'])){
            try{

                $em = $this->getEntityManager();
                $obj = new ControlCalidadBaciloscopia();

                $obj->setTotalMuestraEval($data['total_muestras_eval']);
                $obj->setNumPositivas($data['num_positivas']);
                $obj->setNumNegativas($data['num_negativas']);
                $obj->setFalsosPositivos($data['falsos_positivos']);
                $obj->setFalsosNegativos($data['falsos_negativos']);
                $obj->setErroresCod($data['errores_cod']);
                $obj->setLaminasConcord($data['laminas_concordantes']);
                $obj->setLta($data['lta']);
                $obj->setLea($data['lea']);
                $obj->setLca($data['lca']);

                $lab  = $em->getRepository('AppBundle:AreaSalud')->find($data['id_laboratorio']);
                $obj->setLaboratorio($lab);
                $obj->setFechaEntrada(new \DateTime('now'));
                $obj->setFechaModificada(new \DateTime('now'));

                $em->persist($obj);
                $em->flush();

            }catch (\Exception $e)
            {
                if(strpos($e->getMessage() , 'Duplicate entry') > 0)
                {
                    $msg = 'El Control de Calidad ya fue insertado este mes.';
                }
                else
                {
                    $msg = 'Se produjo un error al insertar el Control de Calidad.';
                }
            }
        }
        else
            $msg = 'El Control de Calidad de Baciloscopia ya fue insertado este mes.';

        return $msg;
    }

    public function modificarControlCalidadBaciloscopia($data)
    {
        $msg = 'ok';

        try
        {
            $em = $this->getEntityManager();
            $obj= $em->getRepository('AppBundle:ControlCalidadBaciloscopia')->find($data['id_laboratorio']);

            $obj->setTotalMuestraEval($data['total_muestras_eval']);
            $obj->setNumPositivas($data['num_positivas']);
            $obj->setNumNegativas($data['num_negativas']);
            $obj->setFalsosPositivos($data['falsos_positivos']);
            $obj->setFalsosNegativos($data['falsos_negativos']);
            $obj->setErroresCod($data['errores_cod']);
            $obj->setLaminasConcord($data['laminas_concordantes']);
            $obj->setLta($data['lta']);
            $obj->setLea($data['lea']);
            $obj->setLca($data['lca']);

            $obj->setFechaModificada(new \DateTime('now'));

            $em->persist($obj);
            $em->flush();

        }catch (\Exception $e)
        {
            $msg = 'Error';
        }

        return $msg;
    }

    public function eliminarControlCalidadBaciloscopia($id)
    {
        try
        {
            $em = $this->getEntityManager();
            $obj = $em->getRepository('AppBundle:ControlCalidadBaciloscopia')->find($id);

            $em->remove($obj);
            $em->flush();
            $msg = $obj;

        }catch (\Exception $e){

            if(strpos($e->getMessage() , 'foreign key') > 0)
            {
                $msg = 'Existen datos asociados a este Control, no se puede eliminar.';
            }
            else
            {
                $msg = 'Se produjo un error al eliminar el Control de Calidad de Baciloscopia.';
            }
        }
        return $msg;
    }

    public function buscaControlCalidadBaciloscopiaExiste($id_laboratorio)
    {
        $existe = false;

        $fechaActual = new \DateTime('now');

        $id_anno  =  $fechaActual->format('Y');
        $id_mes =  $fechaActual->format('m');

        $rangoFecha = $this->fechaRangoMes($id_mes, $id_anno);
        $em = $this->getEntityManager();

        $dql = "SELECT COUNT(control) FROM AppBundle:ControlCalidadBaciloscopia control
                WHERE control.laboratorio = ?1 AND control.fechaEntrada >= $rangoFecha[0] AND control.fechaEntrada <= $rangoFecha[1]";

        $query = $em->createQuery($dql);
        $query->setParameter(1,$id_laboratorio);

        $result = $query->getResult();

        if($result[0][1]>0)
            $existe = true;

        return $existe;
    }

    public function reporteControlCalidadBaciloscopiaJson($id_laboratorio, $id_mes, $id_anno, $id_trimestre, $id_provincia, $id_municipio)
    {

        $em = $this->getEntityManager();

        if( $id_trimestre < 1 ){

            $rangoFecha = $this->fechaRangoMes($id_mes,$id_anno);

            $dql = "SELECT control FROM AppBundle:ControlCalidadBaciloscopia control WHERE control.laboratorio = ?1 AND
                       control.fechaEntrada >= $rangoFecha[0] AND control.fechaEntrada <= $rangoFecha[1]";

        }
        else{

            $rangoFecha = $this->RangoTrimestre($id_trimestre, $id_anno);
            $dql        = $this->calidadBaciloscopiaTrimestral($rangoFecha[0], $rangoFecha[1], $id_laboratorio, $id_provincia, $id_municipio);

        }


        $query = $em->createQuery($dql);

        if( $id_trimestre < 1 )
            $query->setParameter(1,$id_laboratorio);

        $result = $query->getResult();

        if( count($result) == 1 && $id_trimestre < 1){

            $datos = array(
                'id_lab'             => $result[0]->getLaboratorio()->getId(),
                'total_muestra_eval' => $result[0]->getTotalMuestraEval(),
                'num_positivas'      => $result[0]->getNumPositivas(),
                'num_negativas'      => $result[0]->getNumNegativas(),
                'falsos_positivos'   => $result[0]->getFalsosPositivos(),
                'falsos_negativos'   => $result[0]->getFalsosNegativos(),
                'errores_cod'        => $result[0]->getErroresCod(),
                'laminas_concord'    => $result[0]->getLaminasConcord(),
                'lta'                => $result[0]->getLta(),
                'lea'                => $result[0]->getLea(),
                'lca'                => $result[0]->getLca(),
                'fechaEntrada'       => $result[0]->getFechaEntrada()->format('d-m-Y'),
                'fechaModificada'    => $result[0]->getFechaModificada()->format('d-m-Y')
            );
            return $datos;
        }

        elseif( count($result) >= 1 ){

            $total_muestra_eval = 0;
            $num_positivas      = 0;
            $num_negativas      = 0;
            $falsos_positivos   = 0;
            $falsos_negativos   = 0;
            $errores_cod        = 0;
            $laminas_concord    = 0;
            $lta                = 0;
            $lea                = 0;
            $lca                = 0;

            $fechaInicialTrimm = substr($rangoFecha[0], 1,10);
            $fechaFinalTrim    = substr($rangoFecha[1], 1,10);

            $fechaInicialTrim = new \DateTime($fechaInicialTrimm);
            $fechaFinalTrim   = new \DateTime($fechaFinalTrim);

            for( $i = 0; $i < count($result); $i++ ){

                $total_muestra_eval = $total_muestra_eval + $result[$i]->getTotalMuestraEval();
                $num_positivas      = $num_positivas      + $result[$i]->getNumPositivas();
                $num_negativas      = $num_negativas      + $result[$i]->getNumNegativas();
                $falsos_positivos   = $falsos_positivos   + $result[$i]->getFalsosPositivos();
                $falsos_negativos   = $falsos_negativos   + $result[$i]->getFalsosNegativos();
                $errores_cod        = $errores_cod        + $result[$i]->getErroresCod();
                $laminas_concord    = $laminas_concord    + $result[$i]->getLaminasConcord();
                $lta                = $lta                + $result[$i]->getLta();
                $lea                = $lea                + $result[$i]->getLea();
                $lca                = $lca                + $result[$i]->getLca();
            }

            $datos = array(
                'id_lab'             => $result[0]->getLaboratorio()->getId(),
                'total_muestra_eval' => $total_muestra_eval,
                'num_positivas'      => $num_positivas,
                'num_negativas'      => $num_negativas,
                'falsos_positivos'   => $falsos_positivos,
                'falsos_negativos'   => $falsos_negativos,
                'errores_cod'        => $errores_cod,
                'laminas_concord'    => $laminas_concord,
                'lta'                => $lta,
                'lea'                => $lea,
                'lca'                => $lca,
                'fechaInicialTrim'   => $fechaInicialTrim->format('d-m-Y'),
                'fechaFinalTrim'     => $fechaFinalTrim->format('d-m-Y')
            );

            return $datos;
        }

        else{
            $datos = array();
            return $datos;
        }

    }

    public function reporteControlCalidadBaciloscopiaExcel($id_laboratorio, $id_mes, $id_anno, $id_trimestre, $id_provincia, $id_municipio)
    {

        $matriz_resultado = $this->reporteControlCalidadBaciloscopiaJson($id_laboratorio, $id_mes, $id_anno, $id_trimestre, $id_provincia, $id_municipio);

        $nombre_provincia   = "Todas";
        $nombre_municipio   = "Todos";
        $nombre_laboratorio = "Todos";

        $em = $this->getEntityManager();

        if( count($matriz_resultado) > 0 ){

        $tasa_fp        =  ( $matriz_resultado['falsos_positivos'] / $matriz_resultado['num_positivas'] )*100;
        $tasa_fn        =  ( $matriz_resultado['falsos_negativos'] / $matriz_resultado['num_negativas'] )*100;
        $tasa_ec        =  ( $matriz_resultado['errores_cod']      / $matriz_resultado['num_positivas'] )*100;
        $pc_concordancia=  ( $matriz_resultado['laminas_concord']  / $matriz_resultado['total_muestra_eval']  )*100;
        $pc_lta         =  ( $matriz_resultado['lta']              / $matriz_resultado['total_muestra_eval']  )*100;
        $pc_lea         =  ( $matriz_resultado['lea']              / $matriz_resultado['total_muestra_eval']  )*100;
        $pc_lca         =  ( $matriz_resultado['lca']              / $matriz_resultado['total_muestra_eval']  )*100;


        $tasa_fp = round($tasa_fp, 2, PHP_ROUND_HALF_UP);
        $tasa_fn = round($tasa_fn, 2, PHP_ROUND_HALF_UP);
        $tasa_ec = round($tasa_ec, 2, PHP_ROUND_HALF_UP);
        $pc_concordancia = round($pc_concordancia,2, PHP_ROUND_HALF_UP);
        $pc_lta = round($pc_lta, 2, PHP_ROUND_HALF_UP);
        $pc_lea = round($pc_lea, 2, PHP_ROUND_HALF_UP);
        $pc_lca = round($pc_lca, 2, PHP_ROUND_HALF_UP);

            if($id_provincia > 0){
                $provincia        = $em->getRepository('AppBundle:Provincia')->findOneBy(array( 'id' => $id_provincia));
                $nombre_provincia = $provincia->getNombre();
            }
            if($id_municipio > 0){
                $municipio        = $em->getRepository('AppBundle:Municipio')->findOneBy(array( 'id' => $id_municipio));
                $nombre_municipio = $municipio->getNombre();
            }
            if($id_laboratorio > 0){
                $laboratorio        = $em->getRepository('AppBundle:AreaSalud')->findOneBy(array( 'id' => $id_laboratorio));
                $nombre_laboratorio = $laboratorio->getNombre();
            }

            $datos = array(
                'nomLab'             => $nombre_laboratorio,
                'nomProv'            => $nombre_provincia,
                'nomMunic'           => $nombre_municipio,
                'total_muestra_eval' => $matriz_resultado['total_muestra_eval'],
                'num_positivas'      => $matriz_resultado['num_positivas'],
                'num_negativas'      => $matriz_resultado['num_negativas'],
                'falsos_positivos'   => $matriz_resultado['falsos_positivos'],
                'falsos_negativos'   => $matriz_resultado['falsos_negativos'],
                'errores_cod'        => $matriz_resultado['errores_cod'],
                'laminas_concord'    => $matriz_resultado['laminas_concord'],
                'lta'                => $matriz_resultado['lta'],
                'lea'                => $matriz_resultado['lea'],
                'lca'                => $matriz_resultado['lca'],
                'fechaEntrada'       => isset($matriz_resultado['fechaEntrada'])    ? $matriz_resultado['fechaEntrada']    : $matriz_resultado['fechaInicialTrim'],
                'fechaModificada'    => isset($matriz_resultado['fechaModificada']) ? $matriz_resultado['fechaModificada'] : $matriz_resultado['fechaFinalTrim'],
                'tasa_fp'            => $tasa_fp,
                'tasa_fn'            => $tasa_fn,
                'tasa_ec'            => $tasa_ec,
                'pc_concordancia'    => $pc_concordancia,
                'pc_lta'             => $pc_lta,
                'pc_lea'             => $pc_lea,
                'pc_lca'             => $pc_lca,
                'trimestre'          => $id_trimestre,
                'anno'               => $id_anno,
            );
            return $datos;

        }
        else{
            $datos = array();
            return $datos;
        }


//        $rangoFecha = $this->fechaRangoMes($id_mes,$id_anno);
//
//        $em = $this->getEntityManager();
//
//        $dql = "SELECT control FROM AppBundle:ControlCalidadBaciloscopia control
//                WHERE control.laboratorio = ?1 AND control.fechaEntrada >= $rangoFecha[0] AND control.fechaEntrada <= $rangoFecha[1]";
//
//        $query = $em->createQuery($dql);
//        $query->setParameter(1,$id_laboratorio);
//
//        $result = $query->getResult();
//
//        $tasa_fp        =  ( $result[0]->getFalsosPositivos()  / $result[0]->getNumPositivas()      )*100;
//        $tasa_fn        =  ( $result[0]->getFalsosNegativos()  / $result[0]->getNumNegativas()      )*100;
//        $tasa_ec        =  ( $result[0]->getErroresCod()       / $result[0]->getNumPositivas()      )*100;
//        $pc_concordancia=  ( $result[0]->getLaminasConcord()   / $result[0]->getTotalMuestraEval()  )*100;
//        $pc_lta         =  ( $result[0]->getLta()              / $result[0]->getTotalMuestraEval()  )*100;
//        $pc_lea         =  ( $result[0]->getLea()              / $result[0]->getTotalMuestraEval()  )*100;
//        $pc_lca         =  ( $result[0]->getLca()              / $result[0]->getTotalMuestraEval()  )*100;
//
//
//        $tasa_fp = round($tasa_fp, 2, PHP_ROUND_HALF_UP);
//        $tasa_fn = round($tasa_fn, 2, PHP_ROUND_HALF_UP);
//        $tasa_ec = round($tasa_ec, 2, PHP_ROUND_HALF_UP);
//        $pc_concordancia = round($pc_concordancia,2, PHP_ROUND_HALF_UP);
//        $pc_lta = round($pc_lta, 2, PHP_ROUND_HALF_UP);
//        $pc_lea = round($pc_lea, 2, PHP_ROUND_HALF_UP);
//        $pc_lca = round($pc_lca, 2, PHP_ROUND_HALF_UP);
//
//        if(count($result)>0){
//
//            $datos = array(
//                'nomLab'              => $result[0]->getLaboratorio()->getNombre(),
//                'nomProv'             => $result[0]->getLaboratorio()->getMunicipio()->getProvincia()->getNombre(),
//                'nomMunic'            => $result[0]->getLaboratorio()->getMunicipio()->getNombre(),
//                'total_muestra_eval'  => $result[0]->getTotalMuestraEval(),
//                'num_positivas'       => $result[0]->getNumPositivas(),
//                'num_negativas'       => $result[0]->getNumNegativas(),
//                'falsos_positivos'    => $result[0]->getFalsosPositivos(),
//                'falsos_negativos'    => $result[0]->getFalsosNegativos(),
//                'errores_cod'         => $result[0]->getErroresCod(),
//                'laminas_concord'     => $result[0]->getLaminasConcord(),
//                'lta'                 => $result[0]->getLta(),
//                'lea'                 => $result[0]->getLea(),
//                'lca'                 => $result[0]->getLca(),
//                'fechaEntrada'        => $result[0]->getFechaEntrada()->format('d-m-Y'),
//                'fechaModificada'     => $result[0]->getFechaModificada()->format('d-m-Y'),
//                'tasa_fp'            => $tasa_fp,
//                'tasa_fn'            => $tasa_fn,
//                'tasa_ec'            => $tasa_ec,
//                'pc_concordancia'    => $pc_concordancia,
//                'pc_lta'             => $pc_lta,
//                'pc_lea'             => $pc_lea,
//                'pc_lca'             => $pc_lca
//            );
//            return $datos;
//        }
//
//        else{
//            $datos = array();
//            return $datos;
//        }

    }

    public function listadoControlCalidadBaciloscopiaMesActual()
    {
        $fechaActual = new \DateTime('now');

        $id_anno  =  $fechaActual->format('Y');
        $id_mes =  $fechaActual->format('m');

        $rangoFecha = $this->fechaRangoMes($id_mes, $id_anno);

        $em = $this->getEntityManager();

        $dql = "SELECT control FROM AppBundle:ControlCalidadBaciloscopia control
                WHERE control.fechaEntrada >= $rangoFecha[0] AND control.fechaEntrada <= $rangoFecha[1]";

        $query = $em->createQuery($dql);
        $result = $query->getResult();

        if(count($result)>0)
        {
            $datos = array(
                'id_lab'          => $result[0]->getLaboratorio()->getId(),
                'nomLab'          => $result[0]->getLaboratorio()->getNombre(),
                'nomProv'         => $result[0]->getLaboratorio()->getMunicipio()->getProvincia()->getNombre(),
                'nomMunic'        => $result[0]->getLaboratorio()->getMunicipio()->getNombre(),
                'fechaModificada' => $result[0]->getFechaModificada()->format('d-m-Y')
            );
            return $result;
        }

        else{
            $datos = array();
            return $result;
        }
    }

    public function fechaRangoMes($id_mes, $id_anno)
    {
        $fecha = new \DateTime( $id_anno."-".$id_mes."-01" );

        $year  =  $fecha->format('Y');
        $month =  $fecha->format('m');

        //CANTIDAD DE DIAS QUE TIENE EL MES EN EL AÑO ESCOGIDO
        $numDaysMonth = cal_days_in_month (CAL_GREGORIAN, $month,$year);

        return array("'".$year.'-'.$month.'-01'."'","'".$id_anno.'-'.$id_mes.'-'.$numDaysMonth."'");

    }

    public function RangoTrimestre($trimestre,$anno)
    {
        $fechaActual = new \DateTime('now');

        if(empty($anno))
            $year =  $fechaActual->format('Y');
        else
            $year = $anno;

        if($trimestre==1)
            return array("'".$year.'-01-01'."'","'".$year.'-03-31'."'");

        if($trimestre==2)
            return array("'".$year.'-04-01'."'","'".$year.'-06-30'."'");

        if($trimestre==3)
            return array("'".$year.'-07-01'."'","'".$year.'-09-30'."'");

        if($trimestre==4)
            return array("'".$year.'-10-01'."'","'".$year.'-12-31'."'");
    }

    public function calidadBaciloscopiaTrimestral($fechaInicio, $fechaFinal, $id_laboratorio, $id_provincia, $id_municipio){

        $dql_1 = "SELECT cc FROM AppBundle:ControlCalidadBaciloscopia cc ";
        $dql_2 = "";
        $dql_4 = "";
        $dql_5 = "";
        $dql_6 = "";

        if($id_laboratorio > 0)
        {
            $dql_4 = " AND lab.id = $id_laboratorio ";
        }
        if($id_provincia > 0 && $id_provincia != '')
        {
            $dql_2 = " JOIN cc.laboratorio lab JOIN lab.municipio mnp JOIN mnp.provincia prov ";
            $dql_5 = " AND prov.id = $id_provincia ";
        }
        if($id_municipio > 0 && $id_municipio != '')
        {
            $dql_6 = " AND mnp.id = $id_municipio ";
        }

        $dql_3 = " WHERE cc.fechaEntrada >= $fechaInicio AND cc.fechaEntrada <= $fechaFinal";

        $dql = $dql_1.$dql_2.$dql_3.$dql_4.$dql_5.$dql_6;

        return $dql;

    }
}
