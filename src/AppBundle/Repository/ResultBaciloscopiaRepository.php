<?php

namespace AppBundle\Repository;
use AppBundle\Entity\ResultBaciloscopia;



/**
 * ResultBaciloscopiaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ResultBaciloscopiaRepository extends \Doctrine\ORM\EntityRepository
{
    public function agregarResultBaciloscopia($data)
    {
        try{
            $em = $this->getEntityManager();

            $dql = 'SELECT rb FROM AppBundle:ResultBaciloscopia rb JOIN rb.pacienteSintomatico p 
                    WHERE p.carnetIdentidad = :carnet ORDER BY rb.id DESC';
            $query = $em->createQuery($dql);
            $query->setParameter('carnet' , $data['ci']);
            $lastResult = $query->setMaxResults(1)->getResult();
            $fecha = new \DateTime($data['fecha']);

            if(count($lastResult) != 0 && $fecha < $lastResult[0]->getFecha()) return 'Error: Existe un resultado más reciente , no se puede agregar';

            $resultBaciloscopia = new ResultBaciloscopia();
            $resultBaciloscopia->setFecha($fecha);

            $pacienteSintomatico = $em->getRepository('AppBundle:PacienteSintomatico')->findOneBy(array('carnetIdentidad' => $data['ci']));
            $resultBaciloscopia->setPacienteSintomatico($pacienteSintomatico);

            if($data['areaSalud'] != '0')
            {
                $areaSalud = $em->getRepository('AppBundle:AreaSalud')->find($data['areaSalud']);
                $resultBaciloscopia->setAreaSalud($areaSalud);
            }else{
                $hospital = $em->getRepository('AppBundle:Hospital')->find($data['hospital']);
                $resultBaciloscopia->setHospital($hospital);
            }

            $baciloscopia = $em->getRepository('AppBundle:Baciloscopia')->findOneBy(array('clasificacion' => $data['baciloscopia']));
            $resultBaciloscopia->setBaciloscopia($baciloscopia);

            if($pacienteSintomatico->getProceso() != 'registrado' && $pacienteSintomatico->getProceso() != 'pendiente' && $baciloscopia->getClasificacion() != '0') {

                $pacienteSintomatico->setProceso('pendiente');
                $em->persist($pacienteSintomatico);
            }

            $em->persist($resultBaciloscopia);
            $em->flush();
            $msg = $resultBaciloscopia;

        }catch (\Exception $e)
        {
            $msg = 'Se produjo un error al insertar el resultado de la baciloscopía';
        }

        return $msg;
    }

    public function modificarResultBaciloscopia($data)
    {
        try{
            $em = $this->getEntityManager();

            $resultBaciloscopia = $em->getRepository('AppBundle:ResultBaciloscopia')->find($data['idResultBaciloscopia']);

            if($data['areaSalud'] != '0')
            {
                $areaSalud = $em->getRepository('AppBundle:AreaSalud')->find($data['areaSalud']);
                $resultBaciloscopia->setAreaSalud($areaSalud);
                $resultBaciloscopia->setHospital(null);
            }else{
                $hospital = $em->getRepository('AppBundle:Hospital')->find($data['hospital']);
                $resultBaciloscopia->setHospital($hospital);
                $resultBaciloscopia->setAreaSalud(null);
            }

            $baciloscopia = $em->getRepository('AppBundle:Baciloscopia')->findOneBy(array('clasificacion' => $data['baciloscopia']));
            $resultBaciloscopia->setBaciloscopia($baciloscopia);

            $em->persist($resultBaciloscopia);
            $em->flush();

            $pacienteSintomatico = $resultBaciloscopia->getPacienteSintomatico();

            if($pacienteSintomatico->getProceso() != 'registrado'){

                $resultsBaciloscopias = $em->getRepository('AppBundle:PacienteSintomatico')->listarBaciloscopiasPacienteSintomatico($pacienteSintomatico->getCarnetIdentidad());
                $estado  = 'analisis';
                foreach ( $resultsBaciloscopias as $result)
                {
                    if($result->getBaciloscopia()->getClasificacion() != '0')
                    {
                        $estado = 'pendiente';
                    }
                }
                $pacienteSintomatico->setProceso($estado);
                $em->persist($pacienteSintomatico);
                $em->flush();
            }
            $msg = $resultBaciloscopia;

        }catch (\Exception $e)
        {
            $msg = 'Se produjo un error al modificar el resultado de la baciloscopía';
        }

        return $msg;
    }

    public function eliminarResultBaciloscopia($id)
    {
        try {
            $em = $this->getEntityManager();
            $resultBaciloscopia = $em->getRepository('AppBundle:ResultBaciloscopia')->find($id);

            $em->remove($resultBaciloscopia);
            $em->flush();
            $msg = $resultBaciloscopia;

            $pacienteSintomatico = $resultBaciloscopia->getPacienteSintomatico();

            if($pacienteSintomatico->getProceso() != 'registrado'){

                $resultsBaciloscopias = $em->getRepository('AppBundle:PacienteSintomatico')->listarBaciloscopiasPacienteSintomatico($pacienteSintomatico->getCarnetIdentidad());
                $estado  = 'analisis';
                foreach ( $resultsBaciloscopias as $result)
                {
                    if($result->getBaciloscopia()->getClasificacion() != '0')
                    {
                        $estado = 'pendiente';
                    }
                }
                $pacienteSintomatico->setProceso($estado);
                $em->persist($pacienteSintomatico);
                $em->flush();
            }

        } catch (\Exception $e) {

            $msg = 'Se produjo un error al eliminar el resultado de la baciloscopía';
        }
        return $msg;
    }

    public function lastBaciloscopiaPositiva($idPaciente)
    {
        $em = $this->getEntityManager();
        $dql = "SELECT rb FROM AppBundle:ResultBaciloscopia rb JOIN rb.pacienteSintomatico p JOIN rb.baciloscopia b
                WHERE p.id = :id AND b.clasificacion != '0' ORDER BY rb.id DESC";
        $query = $em->createQuery($dql);
        $query->setParameter('id' , $idPaciente);
        $resultBaciloscopia = $query->setMaxResults(1)->getResult();
        return count($resultBaciloscopia) == 0 ? null : $resultBaciloscopia[0];

    }
}
